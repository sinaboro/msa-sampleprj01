eureka:
  client:
    serviceUrl:
      defaultZone: http://localhost:8761/eureka/
spring :
  application:
    name: product-service
  datasource:
    driver-class-name: com.mysql.cj.jdbc.Driver
    url: jdbc:mysql://localhost:3306/ordermsa?useSSL=false&allowPublicKeyRetrieval=true
    username: root
    password: 1234
  jpa:
    database: mysql
    #    InnoDB??
    database-platform: org.hibernate.dialect.MySQL8Dialect
    generate-ddl: true
    hibernate:
      ddl-auto: create
    show_sql: true
  kafka:
    kafka-server: localhost:9092
    consumer:
  # groupid는 컨슈머 그룹을 식별하는 id로서, 동일한 그룹id를 가진 컴슈머들은 메시지를 분담해서 consume
  # 만약 여러 컨슈머가 다른 group-id를 가지고 현 topic을 리슨하면 각기 메시지를 수신하여 메시지 전파 효과 발생
      group-id: product-group
  # kafka내에 들어와있는 메시지중에 처음들어와있는 메시지부터 읽기시작(latest: 현시점이후로 들어오는 메시지만 read)
  # 현 프로젝트에서는 Ordering(publish, 게시자)이고, Product(subscribe, 구독자)이며, kafka(브로커)라고 볼수있다
  # 이런 상황에서 만약 product서버가 죽는 다면, 다시 product서버가 살아라면
  # earliest: kafka있는 메시지를 처음부터 읽는 것이고, latest: product 서버가 살아난 이후부터 읽는다.
      auto-offset-reset: earliest
jwt:
  expiration: 1000
  #  인코딩된 문자 32자 이상 필요.(특수문자안됨)
  #  beyondaccesstokensecretkeybeyondaccesstokensecretkeybeyondaccesstokensecretkey
  secretKey: YmV5b25kYWNjZXNzdG9rZW5zZWNyZXRrZXliZXlvbmRhY2Nlc3N0b2tlbnNlY3JldGtleWJleW9uZGFjY2Vzc3Rva2Vuc2VjcmV0a2V5
  expirationRt: 288000
  #  beyondrefreshtokensecretkeybeyondrefreshtokensecretkeybeyondrefreshtokensecretkey
  secretKeyRt: YmV5b25kcmVmcmVzaHRva2Vuc2VjcmV0a2V5YmV5b25kcmVmcmVzaHRva2Vuc2VjcmV0a2V5YmV5b25kcmVmcmVzaHRva2Vuc2VjcmV0a2V5
server:
  port: 0
